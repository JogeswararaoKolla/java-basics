public interface Collection<E> extends Iterable<E> {}
public interface List<E> extends Collection<E> {}
/*
int size();
boolean isEmpty();
boolean contains(Object o);
Iterator<E> iterator();
boolean add(E e);
boolean remove(Object o);
*/
public class ArrayList<E> extends AbstractList<E>
        implements List<E>, RandomAccess, Cloneable, java.io.Serializable
{}
public class Vector<E>
    extends AbstractList<E>
    implements List<E>, RandomAccess, Cloneable, java.io.Serializable
    {}
public class LinkedList<E>
    extends AbstractSequentialList<E>
    implements List<E>, Deque<E>, Cloneable, java.io.Serializable
{}
public interface Set<E> extends Collection<E> {}
public class HashSet<E>
    extends AbstractSet<E>
    implements Set<E>, Cloneable, java.io.Serializable
{}
public interface Map<K, V> {}
/* Methods supported at Map Interface level
int size();
boolean isEmpty();
boolean containsKey(Object key);
boolean containsValue(Object value);
V get(Object key);
V put(K key, V value);
V remove(Object key);
void clear();
Set<K> keySet();
Collection<V> values();
Set<Map.Entry<K, V>> entrySet();
default V getOrDefault(Object key, V defaultValue);
*/
interface Entry<K, V> {
    K getKey();
    V getValue();
    V setValue(V value);
}
public class HashMap<K,V> extends AbstractMap<K,V>
    implements Map<K,V>, Cloneable, Serializable {}
public interface Function<T, R> {
R apply(T t);
/* @param <T> the type of the input to the function
  @param <R> the type of the result of the function */
}
public interface Predicate<T> {
  /*  @FunctionalInterface Evaluates this predicate on the given argument.@param t the input argument
    boolean test(T t); */
}
public interface Stream<T> extends BaseStream<T, Stream<T>> {
/*
 Stream<T> filter(Predicate<? super T> predicate);
  Returns a stream consisting of the results of applying the given function to the elements of this stream.
  <R> Stream<R> map(Function<? super T, ? extends R> mapper);
  <R> The element type of the new stream
  @param mapper function to apply to each element @return the new stream
*/
}
@FunctionalInterface
public interface BiConsumer<T,U>{
Represents an operation that accepts two input arguments and returns no result.
void accept(T t, U u)
Performs this operation on the given arguments.
}
public final class Collectors
extends Object {
 // Accumulate names into a List
 List<String> list = people.stream()
   .map(Person::getName)
   .collect(Collectors.toList());}
//@FunctionalInterface with one abstract method compare and it has another method equals which abstract but belongs to object class.
public interface Comparator<T>{
int compare(T o1, T o2)
Compares its two arguments for order.
boolean	equals(Object obj)
Indicates whether some other object is "equal to" this comparator.
}